<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, height=device-height, initial-scale=1.0, minimum-scale=1.0" />
		<title>Chat Room</title>
		<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous" />
		<style>
			* {
				box-sizing: border-box;
			}
			html,
			body {
				height: 100%;
				margin: 0;
			}
			.min-h-200px {
				min-height: 200px;
			}
			.min-vh-50 {
				min-height: 50vh;
			}
			.max-vh-100 {
				max-height: 100vh;
			}
			.max-vh-80 {
				max-height: 80vh;
			}
			.min-vh-50 {
				height: 50vh;
				min-height: 50vh;
			}
			.message {
				display: flex;
				margin-bottom: 20px;
			}
			.message.message-from {
				justify-content: start;
			}
			.message.message-to {
				justify-content: end;
			}
			.message > .message-body {
				margin-top: auto;
				margin-bottom: auto;
				margin-left: 10px;
				position: relative;
				padding: 10px;
				border-radius: 10px;
			}
			.message.message-to > .message-body {
				background-color: #78e08f;
			}
			.message > .message-body > .message-footer {
				position: absolute;
				left: 0;
				bottom: -15px;
				color: rgba(42, 41, 41, 0.5);
				font-size: 10px;
			}
		</style>
	</head>
	<body>
		<div class="container-fluid min-vh-100 d-flex flex-column">
			<div class="row flex-grow-1">
				<div class="col-sm-2 d-none d-xl-block border border-dark-subtle">
					<h1 class="text-center">Members</h1>
					<div id="members-list" class="list-group list-group-flush"></div>
				</div>
				<div class="col border border-dark-subtle">
					<div class="text-center">
						<h1><%= displayName %></h1>
						<small>Invite others using this link: /join?roomId=<%= roomId %></small>
					</div>
					<div class="container max-vh-100">
						<div class="row max-vh-100 justify-content-center">
							<div class="col-xl-6 col-lg-8 col-sm-12">
								<div class="card min-h-200px max-vh-80 d-flex flex-column">
									<div id="chat-display" class="card-body min-vh-50" style="overflow: scroll"></div>
									<div class="card-footer">
										<div class="input-group">
											<textarea id="chat-text-input" class="form-control custom-control" rows="3" style="resize: none"></textarea>
											<button id="send-chat-btn" class="input-group-addon btn btn-lg btn-primary">Send</button>
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
		<script>
			const chatTextInput = document.getElementById("chat-text-input");
			const sendChatButton = document.getElementById("send-chat-btn");
			const chatDisplay = document.getElementById("chat-display");
			const membersList = document.getElementById("members-list");

			const roomId = "<%- roomId %>";
			const userId = "<%- userId %>";
			const displayName = "<%- displayName %>";
			const renderedMembers = "<%- members %>";
			const members = renderedMembers.split(",").map((m) => m);

			const socket = new WebSocket("ws://localhost:3000");
			// When this browser window is closed, alert the server that we left.
			window.onbeforeunload = () => socket.send(JSON.stringify({ type: "close", roomId, userId, displayName }));

			// Register a socket for this user on the backend after we first connect/open.
			socket.onopen = (ws, event) => {
				socket.send(JSON.stringify({ type: "register", roomId, userId, displayName }));
			};

			// Recieved socket message
			socket.onmessage = (event) => {
				const message = JSON.parse(event.data);

				if (!message || !message.type) {
					return;
				}

				switch (message?.type) {
					case "join": {
            if (!message?.displayName) {
              return;
            }
						members.push(message.displayName);
						updateMembersList(members);
						break;
					}

					case "message": {
						const { value, from, chatBubbleColor } = message;
						const isSending = false;
						chatDisplay.appendChild(generateChatHTML(value, from, chatBubbleColor, isSending));
						scrollToBottomOfElement(chatDisplay);
						break;
					}

					case "close": {
						const { displayName } = message;
						members.splice(members.indexOf(displayName), 1);
						updateMembersList(members);
						break;
					}

					default: {
						break;
					}
				}
			};

			chatTextInput.addEventListener("keydown", (event) => {
				if (event.key !== "Enter") {
					return;
				}
				event.preventDefault();
				sendChatButton.click();
			});

			sendChatButton.addEventListener("click", (event) => {
				if (!chatTextInput.value) {
					return;
				}
				socket.send(JSON.stringify({ type: "message", from: displayName, value: chatTextInput.value, roomId, userId }));
				const msgHTML = generateChatHTML(chatTextInput.value, displayName, true);
				chatTextInput.value = "";
				chatDisplay.appendChild(msgHTML);
				scrollToBottomOfElement(chatDisplay);
			});

			function scrollToBottomOfElement(element) {
				element.scrollTop = element.scrollHeight;
			}

			// Generate HTML to put into chat display
			function generateChatHTML(message, displayName, chatBubbleColor, isSending = true) {
				const messageDiv = document.createElement("div");
				const messageBodyDiv = document.createElement("div");
				const messageFooterSpan = document.createElement("span");

				let senderOrRecieverClass = "message-to";
				if (!isSending) {
					senderOrRecieverClass = "message-from";
					messageBodyDiv.style.backgroundColor = chatBubbleColor;
				}

				messageDiv.classList.add("message");
				messageDiv.classList.add(senderOrRecieverClass);

				messageBodyDiv.classList.add("message-body");
				messageBodyDiv.innerText = message;

				messageFooterSpan.classList.add("message-footer");
				messageFooterSpan.innerText = displayName;

				messageBodyDiv.appendChild(messageFooterSpan);
				messageDiv.appendChild(messageBodyDiv);

				return messageDiv;
			}

			function updateMembersList(mems = []) {
				membersList.innerHTML = "";
				mems.forEach((m) => (membersList.innerHTML += `<div class="list-group-item">${m}</div>`));
			}
		</script>
		<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
	</body>
</html>
