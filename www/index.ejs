<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>RTChat</title>
    <link href="/public/bootstrap@5.3.3/css/bootstrap.min.css" rel="stylesheet" />
    <%- include("./partials/bootstrap-icons.ejs") %>
    <style>
      html,
      body {
        height: 100%;
        background-color: #eaeaea;
      }

      .fs-2em {
        font-size: 2em;
      }

      .min-w-16px {
        min-width: 16px;
      }

      .max-w-24px {
        max-width: 24px;
      }

      .max-h-100px {
        max-height: 100px;
      }

      .max-h-400px {
        max-height: 400px;
      }

      .max-w-600px {
        max-width: 600px;
      }

      .min-vh-80 {
        min-height: 80vh;
      }

      .min-h-0 {
        min-height: 0;
      }

      .overf-y-scroll {
        overflow-y: scroll;
      }

      .overf-x-scroll {
        overflow-x: scroll;
      }

      .overf-scroll {
        overflow: scroll;
      }
    </style>
  </head>

  <body>
    <%- include("partials/create-account-modal.ejs") %>
    <div class="container d-flex flex-column h-100 justify-content-center align-items-center">
      <div class="row">
        <div class="text-center mb-3">
          <h1 class="display-5">Welcome to RTChat!</h1>
        </div>
      </div>
      <div class="row" style="max-height: 400px">
        <div class="col mh-100">
          <div id="alert-display" class="alert d-none d-flex flex-row align-items-center justify-content-between mh-100" role="alert">
            <i class=""></i>
            <div id="alert-message" class="mb-0 max-h-100px overf-scroll"></div>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
          </div>
        </div>
      </div>
      <div class="row w-100">
        <div class="col-lg-6 offset-lg-3">
          <div class="form-group">
            <form id="login-form">
              <div class="form-floating mb-3">
                <input id="login-email-input" type="text" class="form-control" placeholder="Email Address" required />
                <label for="login-email-input" class="form-label">Email</label>
                <div class="invalid-feedback">Email is required!</div>
              </div>
              <div class="form-floating mb-3">
                <input id="login-password-input" type="password" class="form-control" placeholder="Password" required />
                <label for="login-password-input" class="form-label">Password</label>
                <div class="invalid-feedback">Password is required!</div>
              </div>
              <div class="d-flex justify-content-end">
                <button id="open-create-account-modal-btn" class="btn btn-outline-secondary me-2">Create Account</button>
                <button id="login-btn" class="btn btn-primary">Login</button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
    <script src="/public/bootstrap@5.3.3/js/bootstrap.bundle.min.js"></script>
    <script nonce="<%= nonce %>">
      const mainLoginBtn = document.getElementById("login-btn");
      const loginEmailInput = document.getElementById("login-email-input");
      const loginPasswordInput = document.getElementById("login-password-input");
      const loginForm = document.getElementById("login-form");
      const alertDisplay = document.getElementById("alert-display");
      const alertMessage = document.getElementById("alert-message");

      mainLoginBtn.addEventListener("click", async function (event) {
        event.preventDefault();
        event.stopPropagation();

        const revertSpinnerBtnState = addSpinnerToButton(mainLoginBtn, "Logging in...");

        loginForm.isValid = loginForm.checkValidity();
        loginForm.classList.add("was-validated");
        if (!loginForm.isValid) {
          revertSpinnerBtnState();
          return;
        }

        const loginResponse = await fetch(`${window.location.origin}/api/v1/auth/login`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            e: loginEmailInput.value,
            p: loginPasswordInput.value,
          }),
        });

        revertSpinnerBtnState();

        const loginResult = await loginResponse.json();
        if (!loginResponse?.ok) {
          statusAlert.showWithIcon("danger", "Something went wrong!", "bi-exclamation-triangle-fill");
          return;
        }

        setCookie("session", loginResult.session, 1);
        window.location.pathname = "/chat";
      });

      function setCookie(name, value, days, path = "/") {
        const expires = new Date();
        expires.setTime(expires.getTime() + days * 24 * 60 * 60 * 1000);
        document.cookie = `${name}=${encodeURIComponent(value)};expires=${expires.toUTCString()};path=${path}`;
      }

      // Returns a function that once called, revers button back to original state.
      function addSpinnerToButton(btnElement, btnText = "") {
        // Make button a spinner for "loading" animation purposes
        const originalText = btnElement.innerText;
        if (btnText === "") {
          btnText = originalText;
        }
        const spinnerEl = document.createElement("span");
        const statusEl = document.createElement("span");
        spinnerEl.classList.add("spinner-border", "spinner-border-sm", "me-1");
        statusEl.role = "status";
        statusEl.innerText = btnText;
        // Turn button into spinner
        btnElement.replaceChildren(spinnerEl, statusEl);
        return () => {
          btnElement.innerText = originalText;
        };
      }
    </script>
    <script nonce="<%= nonce %>">
      /*
        Script for create-account-modal
      */
      const openCreateAccountModal = document.getElementById("open-create-account-modal-btn");
      const createAccountModal = document.getElementById("create-account-modal");
      const bsCreateAccountModal = bootstrap.Modal.getOrCreateInstance(createAccountModal);
      const closeCreateAccountModalBtn = document.getElementById("close-modal-btn");
      const form = document.getElementById("form");
      const createBtn = document.getElementById("create-btn");
      const cancelBtn = document.getElementById("cancel-btn");
      const caUnInput = document.getElementById("ca-un-input");
      const caEmailInput = document.getElementById("ca-email-input");
      const caPwInput = document.getElementById("ca-pw-input");
      const statusAlert = new CustomAlert(alertDisplay, alertMessage);

      openCreateAccountModal.addEventListener("click", (e) => {
        event.preventDefault();
        event.stopPropagation();
        if (!bsCreateAccountModal._isShown) {
          bsCreateAccountModal.show();
        }
      });

      createAccountModal.addEventListener("hidden.bs.modal", (event) => {
        // have to remove '.was-validated' from form or else when it's reopened everything is red.
        form.classList.remove("was-validated");
        [caUnInput, caEmailInput, caPwInput].forEach((i) => (i.value = ""));
      });

      // Create account handler
      createBtn.addEventListener("click", async (event) => {
        event.preventDefault();
        event.stopPropagation();

        form.isValid = form.checkValidity();
        form.classList.add("was-validated");

        if (!form.isValid) {
          return;
        }

        // Don't let the user close the modal.
        [createBtn, closeCreateAccountModalBtn, cancelBtn].forEach((e) => (e.disabled = true));
        const removeSpinnerFromBtn = addSpinnerToButton(createBtn, "Creating Account...");

        const accCreationResp = await fetch(`${window.location.origin}/api/v1/auth/register`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            u: caUnInput.value,
            p: caPwInput.value,
            e: caEmailInput.value,
          }),
        });

        const accCreationResult = await accCreationResp.json();
        console.log(accCreationResult);

        // Change button back to normal from spinner/loading animation
        removeSpinnerFromBtn();
        // Enable btns again.
        [createBtn, closeCreateAccountModalBtn, cancelBtn].forEach((e) => e.removeAttribute("disabled"));

        //const bsCreateAccountModal = bootstrap.Modal.getOrCreateInstance(createAccountModal);
        bsCreateAccountModal.hide();

        // Error. Something went wrong creating account
        if (!accCreationResult.ok) {
          console.log("uh oh");
          statusAlert.showWithIcon("danger", "Something went wrong when creating account. Please try again.", "bi-exclamation-triangle-fill");
          return;
        }

        statusAlert.showWithIcon("success", "Success! Account created successfully.", "bi-person-fill-check");
        console.log("success!");
      });

      // Allows you to reuse a single alert element..Returns a function that lets you hide alert.
      // Finds a button with data-bs-dismiss='alert' within alertEl, if found we use it to close alert.
      // If showing with icon, we expect it to be a bootstrap-icon as well as an <i> tag to be within your alertEl.
      function CustomAlert(alertEl, messageEl) {
        this.isShown = false;
        this.alertEl = alertEl;
        this.messageEl = messageEl;
        this.alertIconEl = undefined;
        this.alertType = undefined;
        this.closeButton = alertEl.querySelector("button[data-bs-dismiss='alert']");
        if (this.closeButton) {
          this.closeButton.addEventListener("click", this.close);
        }
        this.showWithIcon = function (alertType, message, icon) {
          this.alertIconEl = alertEl.querySelector("i");
          if (this.alertIconEl) {
            this.alertIconEl.removeAttribute("class"); // clear classes before adding.
            this.alertIconEl.classList.add("bi", icon);
            this.messageEl.classList.add("ms-2"); // add margin since there will be an icon there now.
          }
          this.show(alertType, message);
        };
        this.show = function (alertType, message) {
          if (this.isShown) {
            this.messageEl.classList.remove("ms-2"); // remove just in case it exists..
            // If already shown, close existing before showing new.
            this.close();
          }
          this.alertType = `alert-${alertType}`;
          this.alertEl.classList.add(this.alertType);
          this.messageEl.innerText = message;
          this.alertEl.classList.remove("d-none");
          this.isShown = true;
        };
        this.close = function () {
          if (this.closeButton) {
            this.closeButton.removeEventListener("click", this.close);
          }
          this.alertEl.classList.remove(this.alertType);
          this.messageEl.innerText = "";
          this.alertEl.classList.add("d-none");
          this.isShown = false;
        };
      }
    </script>
  </body>
</html>
