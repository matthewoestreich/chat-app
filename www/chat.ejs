<!doctype html>
<html lang="en" data-bs-theme="dark">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, height=device-height, initial-scale=1.0, minimum-scale=1.0" />
    <title>RTChat | Room</title>
    <link href="/public/bootstrap@5.3.3/css/bootstrap.min.css" rel="stylesheet" />
    <%- include("partials/bootstrap-icons.ejs") %>
    <style>
      html,
      body {
        height: 100%;
      }

      .active-room {
        background-color: var(--bs-secondary-color);
      }

      .min-h-0 {
        min-height: 0;
      }

      @media only screen and (min-width: 992px) {
        .h-lg-90pct {
          height: 90%;
        }
      }
      @media only screen and (max-width: 992px) {
        .h-lg-90pct {
          height: 100%;
        }
      }

      .h-90pct {
        height: 90%;
      }

      .overf-y-scroll {
        overflow-y: scroll !important;
      }

      .overf-hide {
        overflow: hidden;
      }

      .message {
        display: flex;
        flex-direction: column;
        margin-bottom: 0.67rem;
        align-items: start;
        margin-left: 1rem;
        margin-right: 1rem;
      }

      .message > .message-body {
        margin-top: auto;
        margin-bottom: auto;
        position: relative;
        /*padding: 5px;
        border: 0.001rem solid var(--bs-tertiary-color);
        border-radius: 10px;*/
        color: var(--bs-body-color);
        font-weight: 250;
      }

      .message > .message-header {
        color: var(--bs-body-color);
        font-weight: 800;
        font-size: 1rem;
      }
      a.navbar-icon {
        text-decoration: none;
        cursor: pointer;
      }
      .chat-title {
        color: var(--bs-tertiary-color);
        height: 48px;
      }
      .chat-title-no-room {
        font-style: italic;
      }
    </style>
  </head>
  <body>
    <!-- Toast alerts -->
    <div id="toast-container" class="toast-container top-0 end-0 p-2"></div>
    <!-- Modals -->
    <%- include("./partials/leave-room-confirmation-modal.ejs") %> <%- include("./partials/create-room-modal.ejs") %><%- include("./partials/join-room-modal.ejs", { nonce }) %>
    <!-- Navbar -->
    <header class="navbar navbar-expand-lg fixed-top bg-secondary-subtle">
      <nav class="container">
        <div class="me-auto">
          <span class="navbar-brand">RTChat</span>
        </div>
        <div class="mx-auto">
          <a class="navbar-icon d-inline-block d-lg-none" data-bs-toggle="offcanvas" data-bs-target="#members-offcanvas">
            <button class="btn btn-outline-secondary" type="button" title="View Members">
              <i class="bi bi-people"></i>
            </button>
          </a>
          <a class="navbar-icon d-inline-block d-lg-none">
            <button class="btn btn-outline-secondary" type="button" title="View Rooms" data-bs-toggle="offcanvas" data-bs-target="#rooms-offcanvas">
              <i class="bi bi-door-open"></i>
            </button>
          </a>
        </div>
        <div class="ms-auto">
          <a id="toggle-theme" class="navbar-icon" title="Toggle theme">
            <button class="btn btn-outline-secondary flex-fill">
              <svg id="dark-theme-icon" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="d-none bi bi-moon" viewBox="0 0 16 16">
                <path d="M6 .278a.77.77 0 0 1 .08.858 7.2 7.2 0 0 0-.878 3.46c0 4.021 3.278 7.277 7.318 7.277q.792-.001 1.533-.16a.79.79 0 0 1 .81.316.73.73 0 0 1-.031.893A8.35 8.35 0 0 1 8.344 16C3.734 16 0 12.286 0 7.71 0 4.266 2.114 1.312 5.124.06A.75.75 0 0 1 6 .278M4.858 1.311A7.27 7.27 0 0 0 1.025 7.71c0 4.02 3.279 7.276 7.319 7.276a7.32 7.32 0 0 0 5.205-2.162q-.506.063-1.029.063c-4.61 0-8.343-3.714-8.343-8.29 0-1.167.242-2.278.681-3.286" />
              </svg>
              <svg id="light-theme-icon" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-sun-fill fs-3 d-none" viewBox="0 0 16 16">
                <path d="M8 12a4 4 0 1 0 0-8 4 4 0 0 0 0 8M8 0a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 0m0 13a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 13m8-5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2a.5.5 0 0 1 .5.5M3 8a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2A.5.5 0 0 1 3 8m10.657-5.657a.5.5 0 0 1 0 .707l-1.414 1.415a.5.5 0 1 1-.707-.708l1.414-1.414a.5.5 0 0 1 .707 0m-9.193 9.193a.5.5 0 0 1 0 .707L3.05 13.657a.5.5 0 0 1-.707-.707l1.414-1.414a.5.5 0 0 1 .707 0m9.193 2.121a.5.5 0 0 1-.707 0l-1.414-1.414a.5.5 0 0 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .707M4.464 4.465a.5.5 0 0 1-.707 0L2.343 3.05a.5.5 0 1 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .708" />
              </svg>
            </button>
          </a>
          <a class="navbar-icon" href="logout">
            <button class="btn btn-outline-secondary flex-fill" type="button" title="Logout">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-power" viewBox="0 0 16 16">
                <path d="M7.5 1v7h1V1z" />
                <path d="M3 8.812a5 5 0 0 1 2.578-4.375l-.485-.874A6 6 0 1 0 11 3.616l-.501.865A5 5 0 1 1 3 8.812" />
              </svg>
            </button>
          </a>
        </div>
      </nav>
    </header>
    <!-- MAIN CONTENT -->
    <div class="container-fluid h-100 d-flex flex-column" style="padding-top: 4em">
      <div class="row text-center">
        <div class="col">
          <h1><%= name %></h1>
        </div>
      </div>
      <!-- Content Row (main row) -->
      <div class="row g-0 flex-fill justify-content-center min-h-0">
        <div id="members-offcanvas" class="card col-xl-2 col-3 d-lg-flex flex-column h-lg-90pct min-h-0 overf-hide offcanvas-lg offcanvas-start">
          <div class="card-header d-flex flex-row display-6 text-center">
            <div class="flex-fill text-center">Members</div>
            <button type="button" class="btn btn-close btn-sm d-lg-none ms-auto" data-bs-dismiss="offcanvas" data-bs-target="#members-offcanvas"></button>
          </div>
          <div id="members-container" class="card-body overf-y-scroll p-0 m-1">
            <di id="loading-members-spinner" class="d-none d-flex mt-4 justify-content-center">
              <div class="spinner-border">
                <span class="visually-hidden">Loading...</span>
              </div>
            </di>
          </div>
          <div class="card-footer"></div>
        </div>
        <div class="card col-lg-6 offset-lg-0 col-md-10 offset-md-0 h-90pct overf-hide d-flex">
          <div class="card-header d-flex flex-row">
            <div id="chat-title" class="d-flex w-100 text-center justify-content-center align-items-center chat-title chat-title-no-room">Please join a room</div>
          </div>
          <div id="chat-display" class="card-body overf-y-scroll"></div>
          <div class="card-footer">
            <div class="input-group">
              <textarea id="chat-text-input" class="form-control custom-control" rows="3" style="resize: none"></textarea>
              <button id="send-chat-btn" class="input-group-addon btn btn-lg btn-primary">Send</button>
            </div>
          </div>
        </div>
        <div id="rooms-offcanvas" class="card col-xl-2 col-3 d-lg-flex flex-column h-lg-90pct min-h-0 overf-hide offcanvas-lg offcanvas-end">
          <div class="card-header d-flex flex-row display-6 text-center">
            <div class="flex-fill text-center">Rooms</div>
            <button type="button" class="btn btn-close btn-sm d-lg-none ms-auto" data-bs-dismiss="offcanvas" data-bs-target="#rooms-offcanvas"></button>
          </div>
          <div id="rooms-container" class="card-body overf-y-scroll p-0 m-1">
            <div id="loading-rooms-spinner" class="d-flex mt-4 justify-content-center">
              <div class="spinner-border">
                <span class="visually-hidden">Loading...</span>
              </div>
            </div>
          </div>
          <div class="card-footer">
            <div class="row">
              <div class="col-4 d-flex p-1">
                <button id="open-join-room-modal" class="btn btn-outline-secondary flex-grow-1" type="button" title="Join room">
                  <i class="bi bi-box-arrow-in-up-right"></i>
                </button>
              </div>
              <div class="col-4 d-flex p-1">
                <button id="leave-room-btn" class="btn btn-outline-danger flex-grow-1" type="button" title="Leave current room" disabled>
                  <i class="bi bi-box-arrow-down-left"></i>
                </button>
              </div>
              <div class="col-4 d-flex p-1">
                <button id="open-create-room-modal-btn" class="btn btn-outline-secondary flex-grow-1" type="button" title="Create room">
                  <i class="bi bi-folder-plus"></i>
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <script src="/public/bootstrap@5.3.3/js/bootstrap.bundle.min.js"></script>
    <script src="/public/rtchat/CustomAlert.js"></script>
    <script src="/public/rtchat/addSpinnerToButton.js"></script>
    <script nonce="<%= nonce %>">
      // Theme script...
      const toggleThemeBtn = document.getElementById("toggle-theme");
      const darkThemeIcon = document.getElementById("dark-theme-icon");
      const lightThemeIcon = document.getElementById("light-theme-icon");

      let currentTheme = localStorage.getItem("theme");
      if (!currentTheme) {
        currentTheme = "light";
        localStorage.setItem("theme", currentTheme);
      }
      document.documentElement.setAttribute("data-bs-theme", currentTheme);

      if (currentTheme === "dark") {
        lightThemeIcon.classList.remove("d-none");
      } else {
        darkThemeIcon.classList.remove("d-none");
      }

      toggleThemeBtn.addEventListener("click", (e) => {
        // Update current to be opposite since we are toggling...
        const updated = localStorage.getItem("theme") === "dark" ? "light" : "dark";
        localStorage.setItem("theme", updated);
        document.documentElement.setAttribute("data-bs-theme", updated);

        if (updated === "dark") {
          lightThemeIcon.classList.remove("d-none");
          darkThemeIcon.classList.add("d-none");
        } else {
          lightThemeIcon.classList.add("d-none");
          darkThemeIcon.classList.remove("d-none");
        }
      });
    </script>
    <script nonce="<%= nonce %>">
      // User info
      const USER_NAME = "<%= name %>";
      const USER_ID = "<%= id %>";
      const USER_EMAIL = "<%= email %>";
      // Websocket
      const ws = new WebSocket("<%= websocketUrl %>");
      // Members & Rooms elements
      const sendChatBtn = document.getElementById("send-chat-btn");
      const roomsContainer = document.getElementById("rooms-container");
      const membersContainer = document.getElementById("members-container");
      const loadingRoomsSpinner = document.getElementById("loading-rooms-spinner");
      const loadingMembersSpinner = document.getElementById("loading-members-spinner");
      // ~ Modal related ~
      // Leave room confirmation modal
      const leaveRoomConfirmationModal = document.getElementById("leave-room-confirmation-modal");
      const leaveRoomConfirmationModalBody = document.getElementById("leave-room-confirmation-modal-body");
      const openLeaveRoomConfirmModalBtn = document.getElementById("leave-room-btn");
      const confirmedLeaveRoomBtn = document.getElementById("leave-room-confirmation-modal-confirmed-leave-btn");
      // Create room modal
      const createRoomModal = document.getElementById("create-room-modal");
      const openCreateRoomModalBtn = document.getElementById("open-create-room-modal-btn");
      const createRoomBtn = document.getElementById("create-room-btn");
      const createRoomRoomNameInput = document.getElementById("create-room-name-input");
      const createRoomIsPrivateCheckbox = document.getElementById("create-room-isprivate-checkbox");
      const createRoomForm = document.getElementById("create-room-form");
      const createRoomStatusEl = document.getElementById("create-room-alert");
      const createRoomAlert = document.getElementById("create-room-alert");
      const createRoomAlertMessage = document.getElementById("create-room-alert-message");
      // Join room modal
      const joinRoomModal = document.getElementById("join-room-modal");
      const openJoinRoomModalBtn = document.getElementById("open-join-room-modal");
      const joinRoomBtn = document.getElementById("join-room-btn");
      const joinRoomModalRoomsContainer = document.getElementById("join-room-modal-rooms-container");
      const joinRoomModalAlert = document.getElementById("join-room-alert");
      const joinRoomModalAlertMessage = document.getElementById("join-room-alert-message");
      // Chat related elements
      const chatDisplay = document.getElementById("chat-display");
      const sendChatButton = document.getElementById("send-chat-btn");
      const chatTextInput = document.getElementById("chat-text-input");
      const chatTitle = document.getElementById("chat-title");
      // bootstrap instances/objects
      const bsLeaveConfirmationModal = bootstrap.Modal.getOrCreateInstance(leaveRoomConfirmationModal);
      const bsCreateRoomModal = bootstrap.Modal.getOrCreateInstance(createRoomModal);
      const bsJoinRoomModal = bootstrap.Modal.getOrCreateInstance(joinRoomModal);

      const createRoomCallout = new CustomAlert(createRoomAlert, createRoomAlertMessage);
      const joinRoomCallout = new CustomAlert(joinRoomModalAlert, joinRoomModalAlertMessage);

      ws.onopen = () => {
        console.log(`ws connected`);
      };

      ws.onclose = (ws, event) => {
        console.log({ socket: "closed", ws, event });
      };

      ws.onmessage = (rawMessage) => {
        const message = JSON.parse(rawMessage?.data);
        if (!message?.type) {
          return;
        }

        switch (message.type) {
          case "entered_room": {
            const { members, messages } = message;
            handleEnteredRoom(members, messages);
            break;
          }

          case "rooms": {
            handleRooms(roomsContainer, message.rooms);
            break;
          }

          // Received a list of rooms that this user can select.
          case "joinable_rooms": {
            const { ok, rooms, error } = message;
            handleJoinableRooms(joinRoomModalRoomsContainer, ok, rooms, error);
            break;
          }

          case "create_room": {
            const { ok, rooms, createdRoomId, error } = message;
            handleCreatedRoom(ok, rooms, createdRoomId, error);
            break;
          }

          case "members": {
            handleRoomMembers(membersContainer, message.members);
            break;
          }

          // Got a chat message
          case "message": {
            handleMessage(message);
            break;
          }

          // Someone entered the room
          case "member_entered": {
            handleMemberEntered(message?.id);
            break;
          }

          // Someone left the room we are currently in
          case "member_left": {
            handleMemberLeft(message?.id);
            break;
          }

          case "joined": {
            const { ok, error, rooms, joinedRoomId } = message;
            handleJoinedRoom(ok, rooms, joinedRoomId, error);
            break;
          }

          // You unjoined a room
          case "unjoin": {
            // { ok: bool, rooms?: <if ok, list of updated rooms to render>, error?: <if !ok, error will be here> }
            const { ok, rooms, error } = message;
            handleUnjoined(ok, rooms, error);
            break;
          }

          default: {
            break;
          }
        }
      };

      /**
       * Events & Event Handlers
       */

      chatTextInput.addEventListener("keydown", (e) => {
        if (e.key !== "Enter") {
          return;
        }
        e.preventDefault();
        sendChatBtn.click();
      });

      sendChatBtn.addEventListener("click", (e) => {
        const activeRoom = window?.rtcActiveRoom;
        if (!activeRoom) {
          return;
        }
        if (!chatTextInput.value) {
          return;
        }
        if (ws.readyState !== ws.OPEN) {
          const opts = { message: "Unable to send message", displayName: USER_NAME, isSending: true, isError: true };
          chatDisplay.appendChild(generateChatHTML(opts));
          scrollToBottomOfElement(chatDisplay);
          return;
        }
        sendMessage(ws, "send_message", { fromUserId: USER_ID, fromUserName: USER_NAME, toRoom: activeRoom?.id, value: chatTextInput.value });
        const opts = { message: chatTextInput.value, displayName: USER_NAME, isSending: true, isError: false };
        const msgHTML = generateChatHTML(opts);
        chatTextInput.value = "";
        chatDisplay.appendChild(msgHTML);
        scrollToBottomOfElement(chatDisplay);
      });

      createRoomBtn.addEventListener("click", (event) => {
        event.preventDefault();
        event.stopPropagation();
        const revert = addSpinnerToButton(createRoomBtn, "Please wait...");
        createRoomForm.isValid = createRoomForm.checkValidity();
        createRoomForm.classList.add("was-validated");
        if (!createRoomForm.isValid) {
          revert();
          return;
        }
        const roomName = createRoomRoomNameInput.value;
        const isPrivate = createRoomIsPrivateCheckbox.checked === true ? 1 : 0;
        sendMessage(ws, "create_room", { roomName, isPrivate });
      });

      joinRoomBtn.addEventListener("click", (event) => {
        const selected = joinRoomModalRoomsContainer.querySelector(".active");
        if (!selected) {
          return;
        }
        addSpinnerToButton(joinRoomBtn, "Please wait...");
        sendMessage(ws, "join", { userId: USER_ID, roomId: selected.id });
      });

      openLeaveRoomConfirmModalBtn.addEventListener("click", (event) => {
        if (!window?.rtcActiveRoom) {
          return;
        }
        leaveRoomConfirmationModalBody.innerText = `Are you sure you want to leave room '${window.rtcActiveRoom.getAttribute("name")}'?`;
        bsLeaveConfirmationModal.show();
      });

      openJoinRoomModalBtn.addEventListener("click", (event) => {
        sendMessage(ws, "joinable_rooms", {});
        bsJoinRoomModal.show();
      });

      openCreateRoomModalBtn.addEventListener("click", (event) => {
        bsCreateRoomModal.show();
      });

      confirmedLeaveRoomBtn.addEventListener("click", (event) => {
        if (!window?.rtcActiveRoom) {
          bsLeaveConfirmationModal.hide();
          return;
        }
        addSpinnerToButton(confirmedLeaveRoomBtn, "Please wait...");
        sendMessage(ws, "unjoin", { roomId: window.rtcActiveRoom.id });
      });

      joinRoomModal.addEventListener("hidden.bs.modal", (event) => {
        const revert = getSpinnerButtonInstance(joinRoomBtn);
        if (revert) {
          revert();
        }
        joinRoomModalRoomsContainer.replaceChildren();
        joinRoomCallout.close();
      });

      // Clear form when modal is hidden.
      createRoomModal.addEventListener("hidden.bs.modal", (event) => {
        createRoomRoomNameInput.value = "";
        createRoomIsPrivateCheckbox.checked = false;
      });

      function handleRoomClick(event, self, socket) {
        openLeaveRoomConfirmModalBtn.disabled = false;
        const currentActiveRoom = window?.rtcActiveRoom;
        if (currentActiveRoom === self) {
          return;
        }
        chatDisplay.replaceChildren();
        chatTitle.classList.remove("chat-title-no-room");
        chatTitle.innerText = self.innerText;
        self.classList.add("active-room");
        currentActiveRoom?.classList?.remove("active-room");
        window.rtcActiveRoom = self;
        sendMessage(ws, "entered_room", { roomId: self.id });
      }

      /**
       * WebSocket related functions/handlers
       */

      // Active room element is stored at `window.rtcActiveRoom`.
      function handleRooms(appendToElement, rooms, onRenderDone = () => {}) {
        renderRooms(appendToElement, rooms, onRenderDone);
      }

      function handleJoinableRooms(appendToElement, ok, rooms, error) {
        if (!ok) {
          joinRoomCallout.showWithIcon("danger", "Something went wrong. Please close this box and try again.", "bi-exclamation");
          console.log(`[handleJoinableRooms][ERROR]`, error);
          return;
        }
        appendToElement.replaceChildren(); // clear anything existing..
        for (const room of rooms) {
          const roomEl = generateJoinableRoomHTML(room.name, room.id);
          roomEl.addEventListener("click", function (event) {
            const currentActive = appendToElement.querySelector(".active");
            if (currentActive === this) {
              return;
            }
            if (currentActive) {
              currentActive.classList.remove("active");
            }
            this.classList.add("active");
          });
          appendToElement.appendChild(roomEl);
        }
      }

      function handleJoinedRoom(ok, rooms, joinedRoomId, error) {
        const revert = getSpinnerButtonInstance(joinRoomBtn);
        if (revert) {
          revert();
        }
        if (!ok) {
          joinRoomCallout.showWithIcon("danger", "Something went wrong. Please close this box and try again.", "bi-exclamation");
          console.log(`[handleJoinedRoom][ERROR]`, error);
          return;
        }
        rooms.sort((a, b) => a.name.localeCompare(b.name));
        handleRooms(roomsContainer, rooms, () => {
          const r = document.getElementById(joinedRoomId);
          joinRoomModalRoomsContainer.removeChild(r);
          // Even tho the id is the same, it is a different element.
          // We removed it from the 'list of rooms to join' and added it
          // to the 'list of rooms we are currently in'.
          scrollToElement(document.getElementById(joinedRoomId));
        });
        joinRoomCallout.showWithIcon("success", "Successfully joined room!", "bi-check");
      }

      function handleRoomMembers(appendToElement, members) {
        window.rtcRoomMembers = members;
        sortRoomMembers(window.rtcRoomMembers);
        renderMembers(appendToElement, members);
      }

      function handleCreatedRoom(ok, rooms, createdRoomId, error) {
        getSpinnerButtonInstance(createRoomBtn)();
        if (!ok) {
          console.log(`[handleCreatedRooms]`, error);
          createRoomCallout.showWithIcon("danger", "Something went wrong creating room. Please try again.", "bi-exclamation-triangle-fill");
          return;
        }
        createRoomCallout.showWithIcon("success", "Success! Room created successfully.", "bi-check");
        rooms.sort((a, b) => a.name.localeCompare(b.name));
        handleRooms(roomsContainer, rooms, () => {
          scrollToElement(document.getElementById(createdRoomId));
        });
        //bsCreateRoomModal.hide();
      }

      // Received message
      function handleMessage(broadcast) {
        const opts = { message: broadcast.message, displayName: broadcast.from, isSending: false };
        const msgHTML = generateChatHTML(opts);
        chatDisplay.appendChild(msgHTML);
        scrollToBottomOfElement(chatDisplay);
      }

      function handleUnjoined(isSuccess, updatedRooms, error) {
        const revert = getSpinnerButtonInstance(confirmedLeaveRoomBtn);
        if (revert) {
          revert();
        }
        if (!isSuccess) {
          console.error(`[handleUnjoined][ERROR]`, error);
          leaveRoomConfirmationModalBody.innerText = "Something went wrong, please try again.";
          return;
        }
        bsLeaveConfirmationModal.hide();
        handleRooms(roomsContainer, updatedRooms);
        // Clear members and chat from display
        chatDisplay.replaceChildren();
        handleRoomMembers(membersContainer, []);
      }

      function handleEnteredRoom(members, messages) {
        handleRoomMembers(membersContainer, members);
        messages.forEach(({ message, userId, userName, roomId, color }) => {
          const isSending = userId === USER_ID;
          const opts = { message, isSending, displayName: userName };
          const html = generateChatHTML(opts);
          renderChatMessage(chatDisplay, html);
        });
        scrollToBottomOfElement(chatDisplay);
      }

      function handleMemberEntered(id) {
        if (!window.rtcRoomMembers) {
          return;
        }
        const idx = window.rtcRoomMembers.findIndex((m) => m.userId === id);
        if (idx !== -1) {
          window.rtcRoomMembers[idx].isActive = true;
        }
        sortRoomMembers(window.rtcRoomMembers);
        renderMembers(membersContainer, window.rtcRoomMembers);
      }

      function handleMemberLeft(id) {
        if (!window.rtcRoomMembers) {
          return;
        }
        const idx = window.rtcRoomMembers.findIndex((m) => m.userId === id);
        if (idx !== -1) {
          window.rtcRoomMembers[idx].isActive = false;
        }
        sortRoomMembers(window.rtcRoomMembers);
        renderMembers(membersContainer, window.rtcRoomMembers);
      }

      function sendMessage(socket, type, data) {
        if (!socket || !type || !data) {
          console.error(`[sendMessage] Unable to send. Missing either socket, type, or data!`, { socketProvided: socket ? true : false, type, data });
          return;
        }
        const msg = createMessage(type, data);
        socket.send(msg);
      }

      function createMessage(type = "", data = {}) {
        return JSON.stringify({ type, ...data });
      }

      /**
       * Render functions
       */

      function renderChatMessage(containerElement, messageHTML) {
        containerElement.appendChild(messageHTML);
      }

      function renderMembers(containerElement, members) {
        containerElement.replaceChildren(); // clear existing html
        if (!members.length) {
          const p = document.createElement("p");
          p.classList.add("text-body-tertiary");
          p.innerText = "None";
          return containerElement.appendChild(p);
        }
        const membersListElement = document.createElement("ul");
        membersListElement.classList.add("list-group", "list-group-flush");
        for (const m of members) {
          const memberHTML = generateMemberHTML(m.userName, m.userId, m.isActive);
          membersListElement.appendChild(memberHTML);
        }
        containerElement.appendChild(membersListElement);
      }

      function renderRooms(containerElement, rooms, onCompleted = () => {}) {
        containerElement.replaceChildren();
        loadingRoomsSpinner.classList.add("d-none");
        if (!rooms.length) {
          const p = document.createElement("p");
          p.classList.add("body-color-tertiary");
          p.innerText = "None";
          return containerElement.appendChild(p);
        }
        let roomsListElement = document.createElement("ul");
        roomsListElement.classList.add("list-group");
        for (const r of rooms) {
          const roomHtml = generateRoomHTML(r.name, r.id);
          roomHtml.addEventListener("click", function (e) {
            handleRoomClick(e, this, ws);
          });
          roomsListElement.appendChild(roomHtml);
        }
        containerElement.appendChild(roomsListElement);
        onCompleted();
      }

      /**
       * Generate HTML functions
       */

      function generateChatHTML(opts = { message: "", displayName: "", isSending: true, isError: false }) {
        let { message, displayName, isSending, isError } = opts;
        const messageDiv = document.createElement("div");
        const messageBodyDiv = document.createElement("div");
        const messageHeaderSpan = document.createElement("span");
        if (isError) {
          messageBodyDiv.style.backgroundColor = "red";
        }
        messageDiv.classList.add("message");
        messageBodyDiv.classList.add("message-body");
        messageBodyDiv.innerText = message;
        messageHeaderSpan.classList.add("message-header");
        messageHeaderSpan.innerText = displayName;
        messageDiv.appendChild(messageHeaderSpan);
        messageDiv.appendChild(messageBodyDiv);
        return messageDiv;
      }

      function generateMemberHTML(name, id, isActive) {
        const li = document.createElement("li");
        const divUnContainer = document.createElement("div");
        const divUn = document.createElement("div");
        const span = document.createElement("span");
        li.id = id;
        li.classList.add("list-group-item", "d-flex", "justify-content-between", "align-items-start");
        divUnContainer.classList.add("ms-2", "me-auto");
        divUn.innerText = name;
        span.id = `${id}-status`;
        const status = isActive ? "text-bg-success" : "text-bg-warning";
        span.classList.add("badge", "rounded-pill", status);
        // This empty space is intentional
        span.innerText = " ";
        divUnContainer.appendChild(divUn);
        li.appendChild(divUnContainer);
        li.appendChild(span);
        return li;
      }

      function generateRoomHTML(roomName, roomId, text) {
        const listItemLi = document.createElement("li");
        const cardDiv = document.createElement("div");
        const cardBodyDiv = document.createElement("div");
        const cardTitleH5 = document.createElement("h5");
        const cardTextP = document.createElement("p");
        listItemLi.classList.add("list-group-item", "p-1", "border-0");
        listItemLi.id = roomId;
        listItemLi.setAttribute("name", roomName);
        listItemLi.setAttribute("data-bs-dismiss", "offcanvas");
        listItemLi.setAttribute("data-bs-target", "#rooms-offcanvas");
        cardDiv.classList.add("card");
        cardDiv.setAttribute("role", "button"); // For the pointer cursor.
        cardBodyDiv.classList.add("card-body");
        cardTitleH5.classList.add("card-title");
        cardTitleH5.textContent = roomName;
        cardTextP.classList.add("card-text");
        cardTextP.innerText = text || "";
        cardBodyDiv.appendChild(cardTitleH5);
        cardBodyDiv.appendChild(cardTextP);
        cardDiv.appendChild(cardBodyDiv);
        listItemLi.appendChild(cardDiv);
        return listItemLi;
      }

      function generateJoinableRoomHTML(roomName, roomId) {
        const li = document.createElement("li");
        const pRoomName = document.createElement("div");
        const pRoomId = document.createElement("p");
        li.classList.add("list-group-item", "list-group-item-action");
        li.type = "button";
        li.id = roomId;
        li.setAttribute("name", roomName);
        pRoomName.innerText = roomName;
        pRoomName.classList.add("fw-bold", "fs-5");
        pRoomName.style.textDecoration = "bold";
        pRoomId.style.fontSize = "0.6em";
        pRoomId.innerText = roomId;
        li.appendChild(pRoomName);
        li.appendChild(pRoomId);
        return li;
      }

      /**
       * MISC FUNCTIONS
       */

      function sortRoomMembers(members) {
        members.sort((a, b) => {
          if (a.isActive && b.isActive) {
            return a.userName.localeCompare(b.userName);
          }
          if (!a.isActive && !b.isActive) {
            return a.userName.localeCompare(b.userName);
          }
          if (a.isActive) {
            return -1; // Here, if 'a' is active, 'b' has to be inactive.
          }
          return 1; // Here, we can safely assume 'b' is active and 'a' is inactive.
        });
      }

      function scrollToElement(element) {
        if (!element) {
          return;
        }
        element.scrollIntoView({
          behavior: "smooth", // Smooth scrolling
          block: "start", // Align to the top of the container
        });
      }

      function scrollToBottomOfElement(element) {
        element.scrollTop = element.scrollHeight;
      }
    </script>
  </body>
</html>
