<!doctype html>
<html lang="en" data-bs-theme="dark">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, height=device-height, initial-scale=1.0, minimum-scale=1.0" />
    <title>RTChat | Room</title>
    <link href="/public/bootstrap@5.3.3/css/bootstrap.min.css" rel="stylesheet" />
    <%- include("partials/bootstrap-icons.ejs") %>
    <style>
      html,
      body {
        height: 100%;
      }

      .active-room {
        background-color: var(--bs-secondary-color);
      }

      .min-h-0 {
        min-height: 0;
      }

      .h-90pct {
        height: 90%;
      }

      .overf-y-scroll {
        overflow-y: scroll !important;
      }

      .overf-hide {
        overflow: hidden;
      }

      .message {
        display: flex;
        flex-direction: column;
        margin-bottom: 20px;
      }

      .message.message-from {
        align-items: start;
      }

      .message.message-to {
        align-items: end;
      }

      .message-from > .message-footer {
        margin-left: 12px;
      }

      .message-to > .message-footer {
        margin-right: 5px;
      }

      .message > .message-body {
        margin-top: auto;
        margin-bottom: auto;
        margin-left: 10px;
        position: relative;
        padding: 10px;
        border-radius: 10px;
        max-width: 70%;
      }

      .message.message-to > .message-body {
        background-color: #78e08f;
      }

      .message > .message-footer {
        color: var(--bs-secondary-color);
        /*rgba(42, 41, 41, 0.5);*/
        font-size: 10px;
      }
    </style>
  </head>
  <body>
    <!-- Toast alerts -->
    <div id="toast-container" class="toast-container top-0 end-0 p-2"></div>
    <!-- Navbar -->
    <header class="navbar navbar-expand-lg fixed-top bg-secondary-subtle">
      <nav class="container bd-gutter flex-wrap flex-lg-nowrap">
        <a class="navbar-brand p-0 me-0 me-lg-2" href="/"> RTChat </a>
        <div class="d-flex">
          <button class="navbar-toggler d-flex d-lg-none order-3 p-2" type="button" data-bs-toggle="offcanvas" data-bs-target="#bdNavbar">
            <svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" fill="currentColor" class="bi bi-list fs-3" viewBox="0 0 16 16">
              <path fill-rule="evenodd" d="M2.5 12a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5m0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5m0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5" />
            </svg>
          </button>
        </div>
        <div id="bdNavbar" class="offcanvas-lg offcanvas-end flex-grow-1">
          <div class="offcanvas-header px-4 pb-0">
            <h5 class="offcanvas-title" id="bdNavbarOffcanvasLabel">RTChat</h5>
            <button type="button" class="btn-close btn-close" data-bs-dismiss="offcanvas" aria-label="Close" data-bs-target="#bdNavbar"></button>
          </div>
          <div class="offcanvas-body p-4 pt-0 p-lg-0">
            <hr class="d-lg-none text-50" />
            <ul class="navbar-nav d-lg-none flex-row flex-wrap bd-navbar-nav text-center">
              <li class="nav-item col-6 col-lg-auto d-flex">
                <button class="nav-link btn btn-outline-dark flex-fill" data-bs-toggle="offcanvas" data-bs-target="#members-offcanvas">Members</button>
              </li>
              <li class="nav-item col-6 col-lg-auto d-flex">
                <button class="nav-link btn btn-outline-dark flex-fill" data-bs-toggle="offcanvas" data-bs-target="#rooms-offcanvas">Rooms</button>
              </li>
            </ul>
            <hr class="d-lg-none text-50" />
            <ul class="navbar-nav flex-lg-row flex-lg-wrap ms-md-auto">
              <li class="nav-item col-lg-6 col-12 col-lg-auto">
                <a id="toggle-theme" class="nav-link d-flex" style="cursor: pointer" title="Toggle theme">
                  <button class="btn btn-outline-secondary flex-fill">
                    <svg id="dark-theme-icon" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="d-none bi bi-moon" viewBox="0 0 16 16">
                      <path d="M6 .278a.77.77 0 0 1 .08.858 7.2 7.2 0 0 0-.878 3.46c0 4.021 3.278 7.277 7.318 7.277q.792-.001 1.533-.16a.79.79 0 0 1 .81.316.73.73 0 0 1-.031.893A8.35 8.35 0 0 1 8.344 16C3.734 16 0 12.286 0 7.71 0 4.266 2.114 1.312 5.124.06A.75.75 0 0 1 6 .278M4.858 1.311A7.27 7.27 0 0 0 1.025 7.71c0 4.02 3.279 7.276 7.319 7.276a7.32 7.32 0 0 0 5.205-2.162q-.506.063-1.029.063c-4.61 0-8.343-3.714-8.343-8.29 0-1.167.242-2.278.681-3.286" />
                    </svg>
                    <svg id="light-theme-icon" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-sun-fill fs-3 d-none" viewBox="0 0 16 16">
                      <path d="M8 12a4 4 0 1 0 0-8 4 4 0 0 0 0 8M8 0a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 0m0 13a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 13m8-5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2a.5.5 0 0 1 .5.5M3 8a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2A.5.5 0 0 1 3 8m10.657-5.657a.5.5 0 0 1 0 .707l-1.414 1.415a.5.5 0 1 1-.707-.708l1.414-1.414a.5.5 0 0 1 .707 0m-9.193 9.193a.5.5 0 0 1 0 .707L3.05 13.657a.5.5 0 0 1-.707-.707l1.414-1.414a.5.5 0 0 1 .707 0m9.193 2.121a.5.5 0 0 1-.707 0l-1.414-1.414a.5.5 0 0 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .707M4.464 4.465a.5.5 0 0 1-.707 0L2.343 3.05a.5.5 0 1 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .708" />
                    </svg>
                  </button>
                </a>
              </li>
              <li class="nav-item col-lg-6 col-12 col-lg-auto">
                <a class="nav-link d-flex" href="logout">
                  <button class="btn btn-outline-secondary flex-fill" type="button" title="Logout">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-power" viewBox="0 0 16 16">
                      <path d="M7.5 1v7h1V1z" />
                      <path d="M3 8.812a5 5 0 0 1 2.578-4.375l-.485-.874A6 6 0 1 0 11 3.616l-.501.865A5 5 0 1 1 3 8.812" />
                    </svg>
                  </button>
                </a>
              </li>
            </ul>
          </div>
        </div>
      </nav>
    </header>
    <!-- MAIN CONTENT -->
    <div class="container-xl h-100 d-flex flex-column" style="padding-top: 4em">
      <div class="row text-center">
        <div class="col">
          <h1><%= name %></h1>
        </div>
      </div>
      <!-- Content Row (main row) -->
      <div class="row g-0 flex-fill min-h-0">
        <div id="members-offcanvas" class="card col-3 d-lg-flex flex-column rounded-end-3 h-90pct border min-h-0 overf-hide offcanvas-lg offcanvas-end">
          <div class="card-header d-flex flex-row display-6 text-center">
            <div class="flex-fill text-center">Members</div>
            <button type="button" class="btn btn-close btn-sm d-lg-none ms-auto" data-bs-dismiss="offcanvas" data-bs-target="#members-offcanvas"></button>
          </div>
          <div id="members-container" class="card-body overf-y-scroll p-0 m-1">
            <div id="loading-members-spinner" class="d-none d-flex mt-4 justify-content-center">
              <div class="spinner-border">
                <span class="visually-hidden">Loading...</span>
              </div>
            </div>
          </div>
          <div class="card-footer"></div>
        </div>
        <div class="card col-lg-6 offset-lg-0 col-md-10 offset-md-1 h-90pct overf-hide d-flex">
          <div class="card-header d-flex flex-row">
            <div class="flex-fill text-center">Main Title</div>
          </div>
          <div id="chat-display" class="card-body overf-y-scroll"></div>
          <div class="card-footer">
            <div class="input-group">
              <textarea id="chat-text-input" class="form-control custom-control" rows="3" style="resize: none"></textarea>
              <button id="send-chat-btn" class="input-group-addon btn btn-lg btn-primary">Send</button>
            </div>
          </div>
        </div>
        <div id="rooms-offcanvas" class="card col-3 d-lg-flex flex-column h-90pct min-h-0 offcanvas-lg offcanvas-end">
          <div class="card-header d-flex flex-row display-6 text-center">
            <div class="flex-fill text-center">Rooms</div>
            <button type="button" class="btn btn-close btn-sm d-lg-none ms-auto" data-bs-dismiss="offcanvas" data-bs-target="#rooms-offcanvas"></button>
          </div>
          <div id="rooms-container" class="card-body overf-y-scroll p-0 m-1">
            <div id="loading-rooms-spinner" class="d-flex mt-4 justify-content-center">
              <div class="spinner-border">
                <span class="visually-hidden">Loading...</span>
              </div>
            </div>
          </div>
          <div class="card-footer">
            <div class="row">
              <div class="col-6 d-flex">
                <button class="btn btn-outline-secondary flex-grow-1" type="button" title="Create room">
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus" viewBox="0 0 16 16">
                    <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4" />
                  </svg>
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <script nonce="<%= nonce %>">
      // Theme script...
      const toggleThemeBtn = document.getElementById("toggle-theme");
      const darkThemeIcon = document.getElementById("dark-theme-icon");
      const lightThemeIcon = document.getElementById("light-theme-icon");

      let currentTheme = localStorage.getItem("theme");
      if (!currentTheme) {
        currentTheme = "light";
        localStorage.setItem("theme", currentTheme);
      }
      document.documentElement.setAttribute("data-bs-theme", currentTheme);

      if (currentTheme === "dark") {
        lightThemeIcon.classList.remove("d-none");
      } else {
        darkThemeIcon.classList.remove("d-none");
      }

      toggleThemeBtn.addEventListener("click", (e) => {
        // Update current to be opposite since we are toggling...
        const updated = localStorage.getItem("theme") === "dark" ? "light" : "dark";
        localStorage.setItem("theme", updated);
        document.documentElement.setAttribute("data-bs-theme", updated);

        if (updated === "dark") {
          lightThemeIcon.classList.remove("d-none");
          darkThemeIcon.classList.add("d-none");
        } else {
          lightThemeIcon.classList.add("d-none");
          darkThemeIcon.classList.remove("d-none");
        }
      });
    </script>
    <script nonce="<%= nonce %>">
      // User info
      const USER_NAME = "<%= name %>";
      const USER_ID = "<%= id %>";
      const USER_EMAIL = "<%= email %>";
      // Websocket
      const ws = new WebSocket("<%= websocketUrl %>");
      // Members & Rooms elements
      const sendChatBtn = document.getElementById("send-chat-btn");
      const roomsContainer = document.getElementById("rooms-container");
      const membersContainer = document.getElementById("members-container");
      const loadingRoomsSpinner = document.getElementById("loading-rooms-spinner");
      const loadingMembersSpinner = document.getElementById("loading-members-spinner");
      // Chat related elements
      const chatDisplay = document.getElementById("chat-display");
      const sendChatButton = document.getElementById("send-chat-btn");
      const chatTextInput = document.getElementById("chat-text-input");

      // Insert fake messages for testing
      //for (let i = 0; i < 40; i++) {
      //  const msg = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam id ultricies neque, vel suscipit leo.";
      //  const isSending = [true, false][Math.floor(Math.random() * 2)];
      //  renderChatMessage(chatDisplay, msg, "Something Random", isSending);
      //}

      ws.onopen = () => {
        console.log(`ws connected`);
      };

      ws.onclose = (ws, event) => {
        console.log({ socket: "closed", ws, event });
      };

      ws.onmessage = (rawMessage) => {
        const message = JSON.parse(rawMessage?.data);
        if (!message?.type) {
          console.log(`socket message from server missing type!`);
          return;
        }
        console.log("got message", { message });

        switch (message.type) {
          case "rooms": {
            wsHandleRoomsMessage(roomsContainer, message.rooms);
            break;
          }

          case "send_room_members": {
            wsHandleMembersMessage(membersContainer, message.members);
            break;
          }

          // Got a message
          case "broadcast": {
            wsHandleBroadcast(message);
            break;
          }

          // Someone entered the room
          case "entered": {
            wsHandleMemberEntered(message?.id);
            break;
          }

          // Someone left the room we are currently in
          case "left": {
            wsHandleMemberLeft(message?.id);
            break;
          }

          default: {
            console.log(`got message from server :`, { message });
            break;
          }
        }
      };

      /**
       * Events & Event Handlers
       */

      sendChatBtn.addEventListener("click", (e) => {
        const activeRoom = window?.rtcActiveRoom;
        if (!activeRoom) {
          return;
        }
        if (!chatTextInput.value) {
          return;
        }
        if (ws.readyState !== ws.OPEN) {
          const opts = { message: "Unable to send message", displayName: USER_NAME, isSending: true, chatBubbleColor: "red", isError: true };
          chatDisplay.appendChild(generateChatHTML(opts));
          scrollToBottomOfElement(chatDisplay);
          return;
        }
        sendMessage(ws, "send_message", { fromUserId: USER_ID, fromUserName: USER_NAME, toRoom: activeRoom?.id, value: chatTextInput.value });
        const opts = { message: chatTextInput.value, displayName: USER_NAME, isSending: true, isError: false };
        const msgHTML = generateChatHTML(opts);
        chatTextInput.value = "";
        chatDisplay.appendChild(msgHTML);
        scrollToBottomOfElement(chatDisplay);
      });

      function handleRoomClick(event, self, socket) {
        const activeRoomClass = "active-room";
        const currentActiveRoom = window?.rtcActiveRoom;
        if (currentActiveRoom === self) {
          return;
        }
        self.classList.add(activeRoomClass);
        currentActiveRoom?.classList?.remove(activeRoomClass);
        window.rtcActiveRoom = self;
        sendMessage(socket, "entered_room", { roomId: self.id });
      }

      /**
       * WebSocket related functions/handlers
       */

      // Active room element is stored at `window.rtcActiveRoom`.
      function wsHandleRoomsMessage(appendToElement, rooms) {
        renderRooms(appendToElement, rooms);
      }

      function wsHandleMembersMessage(appendToElement, members) {
        window.rtcRoomMembers = members;
        sortRoomMembers(window.rtcRoomMembers);
        renderMembers(appendToElement, members);
      }

      // Received message
      function wsHandleBroadcast(broadcast) {
        const opts = { message: broadcast.message, displayName: broadcast.from, isSending: false, chatBubbleColor: broadcast.color };
        const msgHTML = generateChatHTML(opts);
        chatDisplay.appendChild(msgHTML);
        scrollToBottomOfElement(chatDisplay);
      }

      function wsHandleMemberEntered(id) {
        if (!window.rtcRoomMembers) {
          return;
        }
        const idx = window.rtcRoomMembers.findIndex((m) => m.userId === id);
        if (idx !== -1) {
          window.rtcRoomMembers[idx].isActive = true;
        }
        sortRoomMembers(window.rtcRoomMembers);
        renderMembers(membersContainer, window.rtcRoomMembers);
      }

      function wsHandleMemberLeft(id) {
        if (!window.rtcRoomMembers) {
          return;
        }
        const idx = window.rtcRoomMembers.findIndex((m) => m.userId === id);
        if (idx !== -1) {
          window.rtcRoomMembers[idx].isActive = false;
        }
        sortRoomMembers(window.rtcRoomMembers);
        renderMembers(membersContainer, window.rtcRoomMembers);
      }

      // Send a message
      function sendMessage(socket, type, data) {
        if (!socket || !type || !data) {
          console.error(`[sendMessage] Unable to send. Missing either socket, type, or data!`, { socketProvided: socket ? true : false, type, data });
          return;
        }
        const msg = createMessage(type, data);
        console.log(`sending`, msg);
        socket.send(msg);
      }

      function createMessage(type = "", data = {}) {
        return JSON.stringify({ type, ...data });
      }

      /**
       * Render functions
       */

      function renderChatMessage(containerElement, messageHTML) {
        containerElement.appendChild(messageHTML);
      }

      function renderMembers(containerElement, members) {
        containerElement.replaceChildren(); // clear existing html
        if (!members.length) {
          const p = document.createElement("p");
          p.classList.add("text-body-tertiary");
          p.innerText = "None";
          return containerElement.appendChild(p);
        }
        const membersListElement = document.createElement("ul");
        membersListElement.classList.add("list-group", "list-group-flush");
        for (const m of members) {
          //const memberHTML = generateMemberHTML(m.userName, m.userId);
          //membersListElement.appendChild(memberHTML);
          membersListElement.innerHTML += `
            <li id="${m.userId}" class="list-group-item d-flex justify-content-between align-items-start">
              <div class="ms-2 me-auto">
                <div class="fw-bold">${m.userName}</div>
              </div>
              <span id="${m.userId}-status" class="badge rounded-pill text-bg-${m.isActive ? "success" : "warning"}">${"  "}</span>
            </li>
          `;
        }
        containerElement.appendChild(membersListElement);
      }

      function renderRooms(containerElement, rooms) {
        loadingRoomsSpinner.classList.add("d-none");
        if (!rooms.length) {
          const p = document.createElement("p");
          p.classList.add("body-color-tertiary");
          p.innerText = "None";
          return containerElement.appendChild(p);
        }
        let roomsListElement = document.createElement("ul");
        roomsListElement.classList.add("list-group");
        for (const r of rooms) {
          const roomHtml = generateRoomHTML(r.name, r.id);
          roomHtml.addEventListener("click", function (e) {
            handleRoomClick(e, this, ws);
          });
          roomsListElement.appendChild(roomHtml);
        }
        containerElement.appendChild(roomsListElement);
      }

      /**
       * Generate HTML functions
       */

      function generateChatHTML(opts = { message: "", displayName: "", isSending: true, chatBubbleColor: "", isError: false }) {
        let { message, displayName, isSending, chatBubbleColor, isError } = opts;
        const messageDiv = document.createElement("div");
        const messageBodyDiv = document.createElement("div");
        const messageFooterSpan = document.createElement("span");
        let senderOrRecieverClass = "message-to";
        if (!chatBubbleColor) {
          chatBubbleColor = "lightgreen";
        }
        if (!isSending) {
          senderOrRecieverClass = "message-from";
          messageBodyDiv.style.backgroundColor = chatBubbleColor;
        }
        if (isError) {
          messageBodyDiv.style.backgroundColor = "red";
        }
        messageDiv.classList.add("message");
        messageDiv.classList.add(senderOrRecieverClass);
        messageBodyDiv.classList.add("message-body");
        messageBodyDiv.style.color = "black";
        messageBodyDiv.innerText = message;
        messageFooterSpan.classList.add("message-footer");
        messageFooterSpan.innerText = displayName;
        messageDiv.appendChild(messageBodyDiv);
        messageDiv.appendChild(messageFooterSpan);
        return messageDiv;
      }

      function generateMemberHTML(name, id) {
        const li = document.createElement("li");
        li.classList.add("list-group-item");
        li.id = id;
        li.innerText = name;
        return li;
      }

      function generateRoomHTML(roomName, roomId, text) {
        const listItemLi = document.createElement("li");
        const cardDiv = document.createElement("div");
        const cardBodyDiv = document.createElement("div");
        const cardTitleH5 = document.createElement("h5");
        const cardTextP = document.createElement("p");
        listItemLi.classList.add("list-group-item", "p-1", "border-0");
        listItemLi.id = roomId;
        cardDiv.classList.add("card");
        cardDiv.setAttribute("role", "button"); // For the pointer cursor.
        cardBodyDiv.classList.add("card-body");
        cardTitleH5.classList.add("card-title");
        cardTitleH5.textContent = roomName;
        cardTextP.classList.add("card-text");
        cardTextP.innerText = text || "";
        cardBodyDiv.appendChild(cardTitleH5);
        cardBodyDiv.appendChild(cardTextP);
        cardDiv.appendChild(cardBodyDiv);
        listItemLi.appendChild(cardDiv);
        return listItemLi;
      }

      /**
       * MISC FUNCTIONS
       */

      function sortRoomMembers(members) {
        members.sort((a, b) => {
          if (a.isActive && b.isActive) {
            return a.userName.localeCompare(b.userName);
          }
          if (a.isActive && !b.isActive) {
            return -1;
          }
          if (b.isActive && !a.isActive) {
            return 1;
          }
          return a.userName.localeCompare(b.userName);
        });
      }

      function scrollToBottomOfElement(element) {
        element.scrollTop = element.scrollHeight;
      }
    </script>
    <script src="/public/bootstrap@5.3.3/js/bootstrap.bundle.min.js"></script>
  </body>
</html>
