doctype html
html(lang="en")
  head
    meta(charset="UTF-8")
    meta(name="viewport", content="width=device-width, initial-scale=1.0")
    title RTChat
    link(href="/public/bootstrap@5.3.3/css/bootstrap.min.css", rel="stylesheet")
    link(href="/public/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css", rel="stylesheet")
    style.
      html,
      body {
        height: 100%;
        background-color: #eaeaea;
      }

      .fs-2em {
        font-size: 2em;
      }

      .min-w-16px {
        min-width: 16px;
      }

      .max-w-24px {
        max-width: 24px;
      }

      .max-h-100px {
        max-height: 100px;
      }

      .max-h-400px {
        max-height: 400px;
      }

      .max-w-600px {
        max-width: 600px;
      }

      .min-vh-80 {
        min-height: 80vh;
      }

      .min-h-0 {
        min-height: 0;
      }

      .overf-y-scroll {
        overflow-y: scroll;
      }

      .overf-x-scroll {
        overflow-x: scroll;
      }

      .overf-scroll {
        overflow: scroll;
      }
  body
    include ./partials/create-account-modal
    .container.d-flex.flex-column.h-100.justify-content-center.align-items-center
      .row
        .text-center.mb-3
          h1.display-5 Welcome to RTChat!
      .row(style="max-height: 400px")
        .col.mh-100
          #alert-display.alert.d-none.d-flex.flex-row.align-items-center.justify-content-between.mh-100(role="alert")
            i(class="")
            #alert-message.mb-0.max-h-100px.overf-scroll
            button.btn-close(type="button", data-bs-dismiss="alert", aria-label="Close")
      .row.w-100
        .col-lg-6.offset-lg-3
          .form-group
            form#login-form
              .form-floating.mb-3
                input#login-email-input.form-control(type="text", placeholder="Email Address", required)
                label.form-label(for="login-email-input") Email
                .invalid-feedback Email is required!
              .form-floating.mb-3
                input#login-password-input.form-control(type="password", placeholder="Password", required)
                label.form-label(for="login-password-input") Password
                .invalid-feedback Password is required!
              .d-flex.justify-content-end
                button#open-create-account-modal-btn.btn.btn-outline-secondary.me-2(type="button") Create Account
                button#login-btn.btn.btn-primary Login
    script(src="/public/bootstrap@5.3.3/js/bootstrap.bundle.min.js", type="text/javascript")
    script(src="/public/rtchat/js/CustomAlert.js", type="text/javascript")
    script(src="/public/rtchat/js/addSpinnerToButton.js", type="text/javascript")
    script(type="text/javascript", nonce=nonce).
      const mainLoginBtn = document.getElementById("login-btn");
      const loginEmailInput = document.getElementById("login-email-input");
      const loginPasswordInput = document.getElementById("login-password-input");
      const loginForm = document.getElementById("login-form");
      const alertDisplay = document.getElementById("alert-display");
      const alertMessage = document.getElementById("alert-message");

      mainLoginBtn.addEventListener("click", async function (event) {
        event.preventDefault();
        event.stopPropagation();

        addSpinnerToButton(mainLoginBtn, "Logging in...");

        loginForm.isValid = loginForm.checkValidity();
        loginForm.classList.add("was-validated");
        if (!loginForm.isValid) {
          getSpinnerButtonInstance(mainLoginBtn)();
          return;
        }

        const loginResponse = await fetch(`${window.location.origin}/api/v1/auth/login`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            e: loginEmailInput.value,
            p: loginPasswordInput.value,
          }),
        });

        const revert = getSpinnerButtonInstance(mainLoginBtn)();

        const loginResult = await loginResponse.json();
        if (!loginResponse?.ok) {
          statusAlert.showWithIcon("danger", "Something went wrong!", "bi-exclamation-triangle-fill");
          return;
        }

        setCookie("session", loginResult.session, 1);
        window.location.pathname = "/chat";
      });

      function setCookie(name, value, days, path = "/") {
        const expires = new Date();
        expires.setTime(expires.getTime() + days * 24 * 60 * 60 * 1000);
        document.cookie = `${name}=${encodeURIComponent(value)};expires=${expires.toUTCString()};path=${path}`;
      }
    script(type="text/javascript", nonce=nonce).
      /*
      Script for create-account-modal
      */
      const openCreateAccountModal = document.getElementById("open-create-account-modal-btn");
      const createAccountModal = document.getElementById("create-account-modal");
      const bsCreateAccountModal = bootstrap.Modal.getOrCreateInstance(createAccountModal);
      const closeCreateAccountModalBtn = document.getElementById("close-modal-btn");
      const form = document.getElementById("form");
      const createBtn = document.getElementById("create-btn");
      const cancelBtn = document.getElementById("cancel-btn");
      const caUnInput = document.getElementById("ca-un-input");
      const caEmailInput = document.getElementById("ca-email-input");
      const caPwInput = document.getElementById("ca-pw-input");
      const statusAlert = new CustomAlert(alertDisplay, alertMessage);

      openCreateAccountModal.addEventListener("click", (e) => {
        event.preventDefault();
        event.stopPropagation();
        if (!bsCreateAccountModal._isShown) {
          bsCreateAccountModal.show();
        }
      });

      createAccountModal.addEventListener("hidden.bs.modal", (event) => {
        // have to remove '.was-validated' from form or else when it's reopened everything is red.
        form.classList.remove("was-validated");
        [caUnInput, caEmailInput, caPwInput].forEach((i) => (i.value = ""));
      });

      // Create account handler
      createBtn.addEventListener("click", async (event) => {
        event.preventDefault();
        event.stopPropagation();

        form.isValid = form.checkValidity();
        form.classList.add("was-validated");

        if (!form.isValid) {
          return;
        }

        // Don't let the user close the modal.
        [createBtn, closeCreateAccountModalBtn, cancelBtn].forEach((e) => (e.disabled = true));
        addSpinnerToButton(createBtn, "Creating account...");

        const accCreationResp = await fetch(`${window.location.origin}/api/v1/auth/register`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            u: caUnInput.value,
            p: caPwInput.value,
            e: caEmailInput.value,
          }),
        });

        const accCreationResult = await accCreationResp.json();
        console.log(accCreationResult);

        // Change button back to normal from spinner/loading animation
        removeSpinnerFromBtn();
        // Enable btns again.
        [createBtn, closeCreateAccountModalBtn, cancelBtn].forEach((e) => e.removeAttribute("disabled"));
        bsCreateAccountModal.hide();

        // Error. Something went wrong creating account
        if (!accCreationResult.ok) {
          statusAlert.showWithIcon("danger", "Something went wrong when creating account. Please try again.", "bi-exclamation-triangle-fill");
          return;
        }

        statusAlert.showWithIcon("success", "Success! Account created successfully.", "bi-person-fill-check");
        console.log("success!");
      });
